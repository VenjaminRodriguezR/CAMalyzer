import logging
import os
from typing import Annotated, Optional
from qt import QFileDialog  
import vtk

import slicer
from slicer.ScriptedLoadableModule import *
from slicer.util import VTKObservationMixin
from slicer.parameterNodeWrapper import (
    parameterNodeWrapper,
    WithinRange,
)

from slicer import vtkMRMLScalarVolumeNode, vtkMRMLLabelMapVolumeNode, vtkMRMLModelNode


#
# CAMalyzer
#

class CAMalyzer(ScriptedLoadableModule):
    """Uses ScriptedLoadableModule base class, available at:
    https://github.com/Slicer/Slicer/blob/main/Base/Python/slicer/ScriptedLoadableModule.py
    """

    def __init__(self, parent):
        ScriptedLoadableModule.__init__(self, parent)
        self.parent.title = "CAMalyzer"  # TODO: make this more human readable by adding spaces
        self.parent.categories = ["Examples"]  # TODO: set categories (folders where the module shows up in the module selector)
        self.parent.dependencies = []  # TODO: add here list of module names that this module requires
        self.parent.contributors = ["John Doe (AnyWare Corp.)"]  # TODO: replace with "Firstname Lastname (Organization)"
        # TODO: update with short description of the module and a link to online module documentation
        self.parent.helpText = """
This is an example of scripted loadable module bundled in an extension.
See more information in <a href="https://github.com/organization/projectname#CAMalyzer">module documentation</a>.
"""
        # TODO: replace with organization, grant and thanks
        self.parent.acknowledgementText = """
This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc., Andras Lasso, PerkLab,
and Steve Pieper, Isomics, Inc. and was partially funded by NIH grant 3P41RR013218-12S1.
"""

        # Additional initialization step after application startup is complete
        slicer.app.connect("startupCompleted()", registerSampleData)


#
# Register sample data sets in Sample Data module
#

def registerSampleData():
    """
    Add data sets to Sample Data module.
    """
    # It is always recommended to provide sample data for users to make it easy to try the module,
    # but if no sample data is available then this method (and associated startupCompeted signal connection) can be removed.

    import SampleData
    iconsPath = os.path.join(os.path.dirname(__file__), 'Resources/Icons')

    # To ensure that the source code repository remains small (can be downloaded and installed quickly)
    # it is recommended to store data sets that are larger than a few MB in a Github release.

    # CAMalyzer1
    SampleData.SampleDataLogic.registerCustomSampleDataSource(
        # Category and sample name displayed in Sample Data module
        category='CAMalyzer',
        sampleName='CAMalyzer1',
        # Thumbnail should have size of approximately 260x280 pixels and stored in Resources/Icons folder.
        # It can be created by Screen Capture module, "Capture all views" option enabled, "Number of images" set to "Single".
        thumbnailFileName=os.path.join(iconsPath, 'CAMalyzer1.png'),
        # Download URL and target file name
        uris="https://github.com/Slicer/SlicerTestingData/releases/download/SHA256/998cb522173839c78657f4bc0ea907cea09fd04e44601f17c82ea27927937b95",
        fileNames='CAMalyzer1.nrrd',
        # Checksum to ensure file integrity. Can be computed by this command:
        #  import hashlib; print(hashlib.sha256(open(filename, "rb").read()).hexdigest())
        checksums='SHA256:998cb522173839c78657f4bc0ea907cea09fd04e44601f17c82ea27927937b95',
        # This node name will be used when the data set is loaded
        nodeNames='CAMalyzer1'
    )

    # CAMalyzer2
    SampleData.SampleDataLogic.registerCustomSampleDataSource(
        # Category and sample name displayed in Sample Data module
        category='CAMalyzer',
        sampleName='CAMalyzer2',
        thumbnailFileName=os.path.join(iconsPath, 'CAMalyzer2.png'),
        # Download URL and target file name
        uris="https://github.com/Slicer/SlicerTestingData/releases/download/SHA256/1a64f3f422eb3d1c9b093d1a18da354b13bcf307907c66317e2463ee530b7a97",
        fileNames='CAMalyzer2.nrrd',
        checksums='SHA256:1a64f3f422eb3d1c9b093d1a18da354b13bcf307907c66317e2463ee530b7a97',
        # This node name will be used when the data set is loaded
        nodeNames='CAMalyzer2'
    )


#
# CAMalyzerParameterNode
#

@parameterNodeWrapper
class CAMalyzerParameterNode:
    """
    Parameters for the CAMalyzer module.

    inputVolume - The input volume for segmentation.
    modelForPrediction - File path to the .pth model to be used for prediction.
    outputLabelMap - The output label map resulting from the segmentation.
    modelOutput - The output 3D model generated by the module.
    """
    inputVolume: vtkMRMLScalarVolumeNode  # Input volume to process
    modelForPrediction: str = ""  # Path to the model file (.pth)
    outputLabelMap: vtkMRMLLabelMapVolumeNode  # Output label map
    modelOutput: vtkMRMLModelNode  # Output 3D model


#
# CAMalyzerWidget
#
class CAMalyzerWidget(ScriptedLoadableModuleWidget, VTKObservationMixin):
    """Uses ScriptedLoadableModuleWidget base class."""

    def __init__(self, parent=None) -> None:
        """
        Called when the user opens the module the first time and the widget is initialized.
        """
        ScriptedLoadableModuleWidget.__init__(self, parent)
        VTKObservationMixin.__init__(self)  # needed for parameter node observation
        self.logic = None
        self._parameterNode = None
        self._parameterNodeGuiTag = None

    def setup(self) -> None:
        """
        Called when the user opens the module the first time and the widget is initialized.
        """
        ScriptedLoadableModuleWidget.setup(self)

        # Load widget from .ui file (created by Qt Designer).
        uiWidget = slicer.util.loadUI(self.resourcePath('UI/CAMalyzer.ui'))
        self.layout.addWidget(uiWidget)
        self.ui = slicer.util.childWidgetVariables(uiWidget)

        # Set scene in MRML widgets
        uiWidget.setMRMLScene(slicer.mrmlScene)

        # Create logic class
        self.logic = CAMalyzerLogic()

        # Connections
        self.addObserver(slicer.mrmlScene, slicer.mrmlScene.StartCloseEvent, self.onSceneStartClose)
        self.addObserver(slicer.mrmlScene, slicer.mrmlScene.EndCloseEvent, self.onSceneEndClose)

        # Connect buttons
        self.ui.applyButton.connect('clicked(bool)', self.onApplyButton)
        self.ui.BrowseModelButton.connect('clicked(bool)', self.onModelPathButtonClicked)

        # Initialize parameter node
        self.initializeParameterNode()

    def cleanup(self) -> None:
        """
        Called when the application closes and the module widget is destroyed.
        """
        self.removeObservers()

    def enter(self) -> None:
        """
        Called each time the user opens this module.
        """
        self.initializeParameterNode()

    def exit(self) -> None:
        """
        Called each time the user opens a different module.
        """
        if self._parameterNode:
            self._parameterNode.disconnectGui(self._parameterNodeGuiTag)
            self._parameterNodeGuiTag = None
            self.removeObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self._checkCanApply)

    def onSceneStartClose(self, caller, event) -> None:
        """
        Called just before the scene is closed.
        """
        self.setParameterNode(None)

    def onSceneEndClose(self, caller, event) -> None:
        """
        Called just after the scene is closed.
        """
        if self.parent.isEntered:
            self.initializeParameterNode()

    def initializeParameterNode(self) -> None:
        self.setParameterNode(self.logic.getParameterNode())

        # Ensure inputVolume is initialized
        if not self._parameterNode.inputVolume:
            firstVolumeNode = slicer.mrmlScene.GetFirstNodeByClass("vtkMRMLScalarVolumeNode")
            if firstVolumeNode:
                self._parameterNode.inputVolume = firstVolumeNode
            else:
                logging.warning("No ScalarVolumeNode found in the scene for inputVolume.")

        # Ensure outputLabelMap is initialized
        if not self._parameterNode.outputLabelMap:
            self._parameterNode.outputLabelMap = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLLabelMapVolumeNode")
            logging.info("Created a new LabelMapVolumeNode for outputLabelMap.")

        # Ensure modelOutput is initialized
        if not self._parameterNode.modelOutput:
            self._parameterNode.modelOutput = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLModelNode")
            logging.info("Created a new ModelNode for modelOutput.")

    def setParameterNode(self, inputParameterNode: Optional[CAMalyzerParameterNode]) -> None:
        """
        Set and observe parameter node.
        """
        if self._parameterNode:
            self._parameterNode.disconnectGui(self._parameterNodeGuiTag)
            self.removeObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self._checkCanApply)
        self._parameterNode = inputParameterNode
        if self._parameterNode:
            self._parameterNodeGuiTag = self._parameterNode.connectGui(self.ui)
            self.addObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self._checkCanApply)
            self._checkCanApply()

    def _checkCanApply(self, caller=None, event=None) -> None:
        """
        Enable or disable the Apply button based on parameter validity.
        """
        missing = []
        if not self._parameterNode.inputVolume:
            missing.append("Input Volume")
        if not self._parameterNode.modelForPrediction:
            missing.append("Model for Prediction")
        if not self._parameterNode.outputLabelMap:
            missing.append("Output Label Map")
        if not self._parameterNode.modelOutput:
            missing.append("Model Output")

        if not missing:
            self.ui.applyButton.toolTip = "Run segmentation and model generation"
            self.ui.applyButton.enabled = True
        else:
            self.ui.applyButton.toolTip = f"Missing parameters: {', '.join(missing)}"
            self.ui.applyButton.enabled = False


    
    def onModelPathButtonClicked(self) -> None:
        """
        Open a file dialog to select a model file and update the parameter node.
        """
        try:
            filePath = QFileDialog.getOpenFileName(
                self.parent,
                "Select Model File",
                "",  # Carpeta inicial
                "Model Files (*.pth)"  # Filtro para mostrar archivos .pth
            )[0]
            if filePath:
                self.ui.ModelPathLineEdit.text = filePath
                if self._parameterNode:
                    self._parameterNode.modelForPrediction = filePath
        except Exception as e:
            slicer.util.errorDisplay(f"Failed to select model file: {str(e)}")

    def onApplyButton(self) -> None:
        """
        Run the processing when the Apply button is clicked.
        """
        with slicer.util.tryWithErrorDisplay("Failed to run segmentation and model generation.", waitCursor=True):
            self.logic.process(
                inputVolume=self._parameterNode.inputVolume,
                modelForPrediction=self._parameterNode.modelForPrediction,
                outputLabelMap=self._parameterNode.outputLabelMap,
                modelOutput=self._parameterNode.modelOutput
            )

#
# CAMalyzerLogic
#

class CAMalyzerLogic(ScriptedLoadableModuleLogic):
    """This class should implement all the actual
    computation done by your module.  The interface
    should be such that other python code can import
    this class and make use of the functionality without
    requiring an instance of the Widget.
    Uses ScriptedLoadableModuleLogic base class, available at:
    https://github.com/Slicer/Slicer/blob/main/Base/Python/slicer/ScriptedLoadableModule.py
    """

    def __init__(self) -> None:
        """
        Called when the logic class is instantiated. Can be used for initializing member variables.
        """
        ScriptedLoadableModuleLogic.__init__(self)

    def getParameterNode(self):
        return CAMalyzerParameterNode(super().getParameterNode())

    def process(self,
            inputVolume: vtkMRMLScalarVolumeNode,
            modelForPrediction: str,
            outputLabelMap: vtkMRMLScalarVolumeNode,
            modelOutput: str = "",
            showResult: bool = True) -> None:
        """
        Process the input volume using the specified model and generate outputs.
        """
        if not inputVolume or not outputLabelMap:
            raise ValueError("Input volume or output label map is invalid")
        if not os.path.isfile(modelForPrediction):
            raise ValueError(f"Model file not found: {modelForPrediction}")

        logging.info(f"Processing started with model: {modelForPrediction}")

        # Example logic for loading and applying the model
        # Replace this with actual deep learning inference logic
        result = "Prediction completed successfully."  # Placeholder for model result
        modelOutput = result

        if showResult:
            slicer.util.showStatusMessage(f"Processing completed: {modelOutput}", 2000)

        logging.info("Processing finished.")


#
# CAMalyzerTest
#

class CAMalyzerTest(ScriptedLoadableModuleTest):
    """
    This is the test case for your scripted module.
    Uses ScriptedLoadableModuleTest base class, available at:
    https://github.com/Slicer/Slicer/blob/main/Base/Python/slicer/ScriptedLoadableModule.py
    """

    def setUp(self):
        """ Do whatever is needed to reset the state - typically a scene clear will be enough.
        """
        slicer.mrmlScene.Clear()

    def runTest(self):
        """Run as few or as many tests as needed here.
        """
        self.setUp()
        self.test_CAMalyzer1()

    def test_CAMalyzer1(self):
        """ Ideally you should have several levels of tests.  At the lowest level
        tests should exercise the functionality of the logic with different inputs
        (both valid and invalid).  At higher levels your tests should emulate the
        way the user would interact with your code and confirm that it still works
        the way you intended.
        One of the most important features of the tests is that it should alert other
        developers when their changes will have an impact on the behavior of your
        module.  For example, if a developer removes a feature that you depend on,
        your test should break so they know that the feature is needed.
        """

        self.delayDisplay("Starting the test")

        # Get/create input data

        import SampleData
        registerSampleData()
        inputVolume = SampleData.downloadSample('CAMalyzer1')
        self.delayDisplay('Loaded test data set')

        inputScalarRange = inputVolume.GetImageData().GetScalarRange()
        self.assertEqual(inputScalarRange[0], 0)
        self.assertEqual(inputScalarRange[1], 695)

        outputVolume = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLScalarVolumeNode")
        threshold = 100

        # Test the module logic

        logic = CAMalyzerLogic()

        # Test algorithm with non-inverted threshold
        logic.process(inputVolume, outputVolume, threshold, True)
        outputScalarRange = outputVolume.GetImageData().GetScalarRange()
        self.assertEqual(outputScalarRange[0], inputScalarRange[0])
        self.assertEqual(outputScalarRange[1], threshold)

        # Test algorithm with inverted threshold
        logic.process(inputVolume, outputVolume, threshold, False)
        outputScalarRange = outputVolume.GetImageData().GetScalarRange()
        self.assertEqual(outputScalarRange[0], inputScalarRange[0])
        self.assertEqual(outputScalarRange[1], inputScalarRange[1])

        self.delayDisplay('Test passed')
